import React, { useState } from 'react';
import { Link, useNavigate } from 'react-router-dom';
import { ShoppingBag, ArrowLeft } from 'lucide-react';
import { useCart } from '../context/CartContext';
import CartItem from '../components/Cart/CartItem';
import { useAuth } from '../context/AuthContext';

const Cart: React.FC = () => {
  const { items, getTotalPrice, getTotalItems, clearCart, createOrder, fetchOrders } = useCart();
  const { user } = useAuth();
  const [loading, setLoading] = useState(false);
  const [form, setForm] = useState({
    name: '',
    address: '',
    city: '',
    phone: '',
  });
  const [formError, setFormError] = useState('');
  const navigate = useNavigate();

  if (items.length === 0) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="text-center">
          <ShoppingBag className="w-16 h-16 text-gray-400 mx-auto mb-4" />
          <h2 className="text-2xl font-bold text-gray-900 mb-4">Your cart is empty</h2>
          <p className="text-gray-600 mb-8">Add some products to get started</p>
          <Link
            to="/products"
            className="bg-primary text-white px-6 py-3 rounded-lg hover:bg-primary-dark transition-colors inline-flex items-center space-x-2"
          >
            <ArrowLeft className="w-5 h-5" />
            <span>Continue Shopping</span>
          </Link>
        </div>
      </div>
    );
  }

  const handleCheckout = async () => {
    if (!user) return;
    // Validate form
    if (!form.name || !form.address || !form.city || !form.phone) {
      setFormError('Please fill in all fields.');
      return;
    }
    setFormError('');
    setLoading(true);
    // Calculate shipping and tax
    const subtotal = getTotalPrice();
    const shipping = subtotal > 50 ? 0 : 5.99;
    const tax = subtotal * 0.08;
    const orderTotal = subtotal + shipping + tax;
    // 1. Create order in backend
    const newOrder = await createOrder({
      userId: user.id,
      products: items.map(item => ({ product: item.product.id, quantity: item.quantity })),
      total: orderTotal,
      name: form.name,
      address: form.address,
      city: form.city,
      phone: form.phone,
    });
    await fetchOrders();
    // 2. Compose WhatsApp message
    const orderText = items.map(item => `${item.product.name} x${item.quantity}`).join(', ');
    const waMessage =
      `Order for: ${form.name}\n` +
      `Phone: ${form.phone}\n` +
      `Address: ${form.address}, ${form.city}\n` +
      `Items: ${orderText}\n` +
      `Subtotal: $${subtotal.toFixed(2)}\n` +
      `Shipping: $${shipping === 0 ? 'Free' : shipping.toFixed(2)}\n` +
      `Tax: $${tax.toFixed(2)}\n` +
      `Total: $${orderTotal.toFixed(2)}`;
    const phoneNum = '252613669524';
    const whatsappUrl = `https://wa.me/${phoneNum}?text=${encodeURIComponent(waMessage)}`;
    // 3. Redirect to Orders page and pass newOrder in state
    navigate('/orders', { state: { newOrder } });
    // 4. Open WhatsApp in new tab
    window.open(whatsappUrl, '_blank');
    // 5. Clear cart
    clearCart();
    setLoading(false);
  };

  return (
    <div className="min-h-screen bg-gray-50">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        <div className="flex items-center justify-between mb-8">
          <h1 className="text-3xl font-bold text-gray-900">Shopping Cart</h1>
          <Link
            to="/products"
            className="text-primary hover:text-primary-dark flex items-center space-x-2"
          >
            <ArrowLeft className="w-5 h-5" />
            <span>Continue Shopping</span>
          </Link>
        </div>

        <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
          {/* Cart Items */}
          <div className="lg:col-span-2 space-y-4">
            {items.map((item) => (
              <CartItem key={item.product.id} item={item} />
            ))}
            
            <div className="flex justify-between items-center pt-4">
              <button
                onClick={clearCart}
                className="text-red-600 hover:text-red-800 transition-colors"
              >
                Clear Cart
              </button>
              <p className="text-gray-600">
                {getTotalItems()} {getTotalItems() === 1 ? 'item' : 'items'} in cart
              </p>
            </div>
          </div>

          {/* Order Summary */}
          <div className="lg:col-span-1">
            <div className="bg-white rounded-lg shadow-md p-6 sticky top-24">
              <h2 className="text-xl font-semibold mb-4">Shipping Details</h2>
              <form className="space-y-3 mb-6" onSubmit={e => { e.preventDefault(); handleCheckout(); }}>
                <input
                  type="text"
                  placeholder="Full Name"
                  className="w-full p-2 border rounded-lg"
                  value={form.name}
                  onChange={e => setForm(f => ({ ...f, name: e.target.value }))}
                  required
                />
                <input
                  type="text"
                  placeholder="Address"
                  className="w-full p-2 border rounded-lg"
                  value={form.address}
                  onChange={e => setForm(f => ({ ...f, address: e.target.value }))}
                  required
                />
                <input
                  type="text"
                  placeholder="City"
                  className="w-full p-2 border rounded-lg"
                  value={form.city}
                  onChange={e => setForm(f => ({ ...f, city: e.target.value }))}
                  required
                />
                <input
                  type="tel"
                  placeholder="Phone Number"
                  className="w-full p-2 border rounded-lg"
                  value={form.phone}
                  onChange={e => setForm(f => ({ ...f, phone: e.target.value }))}
                  required
                />
                {formError && <div className="text-red-600 text-sm">{formError}</div>}
                <button
                  type="submit"
                  className="w-full bg-primary text-white py-3 rounded-lg hover:bg-primary-dark transition-colors font-semibold disabled:opacity-60 mt-2"
                  disabled={loading}
                >
                  {loading ? 'Processing...' : 'Proceed to Checkout'}
                </button>
              </form>
              <h2 className="text-xl font-semibold mb-4">Order Summary</h2>
              
              <div className="space-y-3 mb-6">
                <div className="flex justify-between">
                  <span className="text-gray-600">Subtotal</span>
                  <span className="font-medium">${getTotalPrice().toFixed(2)}</span>
                </div>
                <div className="flex justify-between">
                  <span className="text-gray-600">Shipping</span>
                  <span className="font-medium">
                    {getTotalPrice() > 50 ? 'Free' : '$5.99'}
                  </span>
                </div>
                <div className="flex justify-between">
                  <span className="text-gray-600">Tax</span>
                  <span className="font-medium">${(getTotalPrice() * 0.08).toFixed(2)}</span>
                </div>
                <div className="border-t pt-3">
                  <div className="flex justify-between text-lg font-bold">
                    <span>Total</span>
                    <span>
                      ${(getTotalPrice() + (getTotalPrice() > 50 ? 0 : 5.99) + getTotalPrice() * 0.08).toFixed(2)}
                    </span>
                  </div>
                </div>
              </div>

              <p className="text-sm text-gray-500 mt-4 text-center">
                Secure checkout powered by Stripe
              </p>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default Cart;