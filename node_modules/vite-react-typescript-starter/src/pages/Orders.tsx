import React, { useEffect, useState } from 'react';
import { useAuth } from '../context/AuthContext';
import { useCart } from '../context/CartContext';
import { useLocation } from 'react-router-dom';

const Orders: React.FC = () => {
  const { user } = useAuth();
  const { fetchOrders, orders } = useCart();
  const [loading, setLoading] = useState(true);
  const [userOrders, setUserOrders] = useState<any[]>([]);

  const location = useLocation();
  useEffect(() => {
    const loadOrders = async () => {
      setLoading(true);
      const allOrders = await fetchOrders();
      let filtered = [];
      if (user) {
        filtered = allOrders.filter((order: any) =>
          order.userId && (order.userId._id === user.id || order.userId === user.id)
        );
      }
      // If newOrder is passed in location.state, add it if not present
      if (location.state?.newOrder && !filtered.some((o: any) => o._id === location.state.newOrder._id)) {
        filtered = [location.state.newOrder, ...filtered];
      }
      setUserOrders(filtered);
      setLoading(false);
    };
    loadOrders();
    // eslint-disable-next-line
  }, [user, location.state]);

  // Group orders by status
  const pendingOrders = userOrders.filter(order => order.status === 'pending');
  const completedOrders = userOrders.filter(order => order.status === 'completed');
  const canceledOrders = userOrders.filter(order => order.status === 'canceled');

  // Cancel order handler (frontend only)
  const handleCancelOrder = (orderId: string) => {
    setUserOrders(prev => prev.map(order =>
      order._id === orderId ? { ...order, status: 'canceled' } : order
    ));
    // TODO: Add backend update call here if needed
  };

  if (!user) {
    return <div className="min-h-screen flex items-center justify-center">Please login to view your orders.</div>;
  }

  return (
    <div className="min-h-screen bg-gray-50 py-8">
      <div className="max-w-3xl mx-auto bg-white rounded-2xl shadow-lg p-8">
        <h2 className="text-3xl font-bold mb-8 text-primary flex items-center gap-2">
          My Orders
        </h2>
        {loading ? (
          <div className="flex items-center justify-center py-12">
            <span className="text-primary text-lg font-semibold">Loading...</span>
          </div>
        ) : (
          <>
            {/* Pending Orders */}
            <div className="mb-10">
              <h3 className="text-xl font-bold mb-4 text-yellow-700">Pending Orders</h3>
              {pendingOrders.length === 0 ? (
                <div className="text-gray-500 mb-6">No pending orders.</div>
              ) : (
                <div className="space-y-8">
                  {pendingOrders.map((order) => (
                    <div key={order._id} className="border border-gray-100 rounded-xl shadow p-6 bg-gray-50">
                      <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between mb-4 gap-2">
                        <div className="flex items-center gap-2">
                          <span className="font-semibold text-gray-700">Order ID:</span>
                          <span className="text-xs text-gray-500 font-mono">{order._id}</span>
                        </div>
                        <span className="px-3 py-1 rounded-full text-xs font-bold bg-yellow-100 text-yellow-700">Pending</span>
                      </div>
                      <div className="mb-4">
                        <span className="font-semibold text-gray-700">Products:</span>
                        <ul className="mt-2 space-y-2">
                          {order.products.map((item: any, idx: number) => (
                            <li key={idx} className="flex items-center gap-3">
                              {item.product && item.product.image && (
                                <img src={item.product.image} alt={item.product.name} className="w-10 h-10 rounded object-cover border" />
                              )}
                              <span className="font-medium text-gray-900">{item.product && (item.product.name || item.product)}</span>
                              <span className="text-xs text-gray-500">x{item.quantity}</span>
                            </li>
                          ))}
                        </ul>
                      </div>
                      <div className="flex items-center gap-2 mb-2">
                        <span className="font-semibold text-gray-700">Total:</span>
                        <span className="text-lg font-bold text-primary">${order.total}</span>
                      </div>
                      <div className="text-sm text-gray-500 mb-4">Created: {new Date(order.createdAt).toLocaleString()}</div>
                      <button
                        onClick={() => handleCancelOrder(order._id)}
                        className="px-4 py-2 bg-red-600 text-white rounded-lg font-semibold hover:bg-red-700 transition-colors"
                      >
                        Cancel Order
                      </button>
                    </div>
                  ))}
                </div>
              )}
            </div>
            {/* Completed Orders */}
            <div className="mb-10">
              <h3 className="text-xl font-bold mb-4 text-green-700">Completed Orders</h3>
              {completedOrders.length === 0 ? (
                <div className="text-gray-500 mb-6">No completed orders.</div>
              ) : (
                <div className="space-y-8">
                  {completedOrders.map((order) => (
                    <div key={order._id} className="border border-gray-100 rounded-xl shadow p-6 bg-gray-50">
                      <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between mb-4 gap-2">
                        <div className="flex items-center gap-2">
                          <span className="font-semibold text-gray-700">Order ID:</span>
                          <span className="text-xs text-gray-500 font-mono">{order._id}</span>
                        </div>
                        <span className="px-3 py-1 rounded-full text-xs font-bold bg-green-100 text-green-700">Completed</span>
                      </div>
                      <div className="mb-4">
                        <span className="font-semibold text-gray-700">Products:</span>
                        <ul className="mt-2 space-y-2">
                          {order.products.map((item: any, idx: number) => (
                            <li key={idx} className="flex items-center gap-3">
                              {item.product && item.product.image && (
                                <img src={item.product.image} alt={item.product.name} className="w-10 h-10 rounded object-cover border" />
                              )}
                              <span className="font-medium text-gray-900">{item.product && (item.product.name || item.product)}</span>
                              <span className="text-xs text-gray-500">x{item.quantity}</span>
                            </li>
                          ))}
                        </ul>
                      </div>
                      <div className="flex items-center gap-2">
                        <span className="font-semibold text-gray-700">Total:</span>
                        <span className="text-lg font-bold text-primary">${order.total}</span>
                      </div>
                      <div className="text-sm text-gray-500">Created: {new Date(order.createdAt).toLocaleString()}</div>
                    </div>
                  ))}
                </div>
              )}
            </div>
            {/* Canceled Orders */}
            <div className="mb-10">
              <h3 className="text-xl font-bold mb-4 text-red-700">Canceled Orders</h3>
              {canceledOrders.length === 0 ? (
                <div className="text-gray-500 mb-6">No canceled orders.</div>
              ) : (
                <div className="space-y-8">
                  {canceledOrders.map((order) => (
                    <div key={order._id} className="border border-gray-100 rounded-xl shadow p-6 bg-gray-50">
                      <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between mb-4 gap-2">
                        <div className="flex items-center gap-2">
                          <span className="font-semibold text-gray-700">Order ID:</span>
                          <span className="text-xs text-gray-500 font-mono">{order._id}</span>
                        </div>
                        <span className="px-3 py-1 rounded-full text-xs font-bold bg-red-100 text-red-700">Canceled</span>
                      </div>
                      <div className="mb-4">
                        <span className="font-semibold text-gray-700">Products:</span>
                        <ul className="mt-2 space-y-2">
                          {order.products.map((item: any, idx: number) => (
                            <li key={idx} className="flex items-center gap-3">
                              {item.product && item.product.image && (
                                <img src={item.product.image} alt={item.product.name} className="w-10 h-10 rounded object-cover border" />
                              )}
                              <span className="font-medium text-gray-900">{item.product && (item.product.name || item.product)}</span>
                              <span className="text-xs text-gray-500">x{item.quantity}</span>
                            </li>
                          ))}
                        </ul>
                      </div>
                      <div className="flex items-center gap-2">
                        <span className="font-semibold text-gray-700">Total:</span>
                        <span className="text-lg font-bold text-primary">${order.total}</span>
                      </div>
                      <div className="text-sm text-gray-500">Created: {new Date(order.createdAt).toLocaleString()}</div>
                    </div>
                  ))}
                </div>
              )}
            </div>
          </>
        )}
      </div>
    </div>
  );
};

export default Orders; 